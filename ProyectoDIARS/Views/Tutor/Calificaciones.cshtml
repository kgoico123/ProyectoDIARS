@model ProyectoDIARS.ViewModels.TutorCalificacionesVM
@{
    ViewData["Title"] = "Calificaciones";

    string NotaLiteral(int puntaje)
    {
        if (puntaje >= 18) return "AD";
        if (puntaje >= 14) return "A";
        if (puntaje >= 11) return "B";
        return "C";
    }

    string PromedioLiteral(double promedio)
    {
        if (promedio >= 18) return "AD";
        if (promedio >= 14) return "A";
        if (promedio >= 11) return "B";
        return "C";
    }

    // Se cambia para devolver clases de Tailwind directamente
    string ColorClaseNota(string literal)
    {
        return literal switch
        {
            "AD" => "bg-blue-100 text-blue-800",
            "A" => "bg-green-100 text-green-800",
            "B" => "bg-yellow-100 text-yellow-800",
            "C" => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
    
    // Función para los colores del gráfico
    string ColorHexNota(string literal)
    {
        return literal switch
        {
            "AD" => "#3b82f6", // blue-500
            "A" => "#22c55e", // green-500
            "B" => "#f59e0b", // amber-500
            "C" => "#ef4444", // red-500
            _ => "#6b7280"  // gray-500
        };
    }
}

<div class="min-h-screen p-4 sm:p-6 lg:p-8">
    <div class="max-w-7xl mx-auto">
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
            <h2 class="text-2xl sm:text-3xl font-bold text-gray-800 mb-2 sm:mb-0">
                Calificaciones de <span class="text-indigo-600">@Model.Estudiante?.user?.UserName</span>
            </h2>
            <a href="@Url.Action("Dashboard", "Tutor")" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                &larr; Volver al Panel
            </a>
        </div>

        @if (!Model.Calificaciones.Any())
        {
            <div class="bg-white text-center p-12 rounded-lg shadow-md mt-10">
                <svg class="mx-auto h-12 w-12 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" />
                </svg>
                <h3 class="mt-2 text-lg font-medium text-gray-900">Sin Calificaciones</h3>
                <p class="mt-1 text-sm text-gray-500">Este estudiante aún no tiene calificaciones registradas.</p>
            </div>
        }
        else
        {
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div class="lg:col-span-1 bg-white p-6 rounded-xl shadow-lg flex flex-col items-center justify-center">
                    <h3 class="text-lg font-semibold text-gray-700 mb-4">Promedio por Curso</h3>
                    <div style="width:300px; height:300px;">
                        <canvas id="promediosPieChart"></canvas>
                    </div>
                </div>

                <div class="lg:col-span-2 bg-white rounded-xl shadow-lg overflow-hidden">
                    <div class="p-6">
                         <h3 class="text-lg font-semibold text-gray-700">Detalle de Calificaciones</h3>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full text-sm text-left">
                            <thead class="bg-gray-50 border-b border-gray-200">
                                <tr>
                                    <th class="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Curso</th>
                                    <th class="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider text-center">Nota</th>
                                    <th class="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
                                    <th class="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Observación</th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200">
                                @foreach (var c in Model.Calificaciones.OrderByDescending(cal => cal.FechaCalificacion))
                                {
                                    <tr class="hover:bg-gray-50 transition-colors">
                                        <td class="px-6 py-4 whitespace-nowrap font-medium text-gray-800">@c.Estudiante_Curso?.Curso?.Nombre</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-center">
                                            <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full @ColorClaseNota(NotaLiteral(c.Puntaje))">
                                                @NotaLiteral(c.Puntaje)
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-gray-500">@c.FechaCalificacion.ToString("dd MMM, yyyy")</td>
                                        <td class="px-6 py-4 text-gray-500">@c.Comentario</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            @if (Model.Calificaciones.Any())
            {
                <text>
                const labels = @Html.Raw(Json.Serialize(Model.PromediosPorCurso.Select(p => p.Curso)));
                const promedios = @Html.Raw(Json.Serialize(Model.PromediosPorCurso.Select(p => p.Promedio)));
                const promediosLiterales = @Html.Raw(Json.Serialize(Model.PromediosPorCurso.Select(p => PromedioLiteral((double)p.Promedio))));
                
                const backgroundColors = promediosLiterales.map(literal => {
                    switch(literal) {
                        case "AD": return "#3b82f6";
                        case "A": return "#22c55e";
                        case "B": return "#f59e0b";
                        case "C": return "#ef4444";
                        default: return "#6b7280";
                    }
                });

                const ctx = document.getElementById('promediosPieChart')?.getContext('2d');
                if (ctx) {
                    new Chart(ctx, {
                        type: 'doughnut',
                        data: {
                            labels: labels.map((l, i) => `${l} (${promediosLiterales[i]})`),
                            datasets: [{
                                label: 'Promedio',
                                data: promedios,
                                backgroundColor: backgroundColors,
                                hoverOffset: 4
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        padding: 20,
                                        boxWidth: 12,
                                        font: {
                                            size: 12
                                        }
                                    }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            let label = context.dataset.label || '';
                                            if (label) {
                                                label += ': ';
                                            }
                                            if (context.parsed !== null) {
                                                label += context.parsed.toFixed(2);
                                            }
                                            return label;
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
                </text>
            }
        });
    </script>
}
